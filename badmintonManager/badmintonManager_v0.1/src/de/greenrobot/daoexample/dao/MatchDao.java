package de.greenrobot.daoexample.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.dao.Match;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MatchTable.
*/
public class MatchDao extends AbstractDao<Match, Long> {

    public static final String TABLENAME = "MatchTable";

    /**
     * Properties of entity Match.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, java.util.Date.class, "time", false, "TIME");
        public final static Property Area = new Property(2, String.class, "area", false, "AREA");
        public final static Property Manager = new Property(3, String.class, "manager", false, "MANAGER");
        public final static Property Menbers = new Property(4, String.class, "menbers", false, "MENBERS");
        public final static Property PaidMenbers = new Property(5, String.class, "paidMenbers", false, "PAID_MENBERS");
        public final static Property Price = new Property(6, Integer.class, "price", false, "PRICE");
        public final static Property IsComplete = new Property(7, Boolean.class, "isComplete", false, "IS_COMPLETE");
    };


    public MatchDao(DaoConfig config) {
        super(config);
    }
    
    public MatchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MatchTable' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TIME' INTEGER," + // 1: time
                "'AREA' TEXT," + // 2: area
                "'MANAGER' TEXT," + // 3: manager
                "'MENBERS' TEXT," + // 4: menbers
                "'PAID_MENBERS' TEXT," + // 5: paidMenbers
                "'PRICE' INTEGER," + // 6: price
                "'IS_COMPLETE' INTEGER);"); // 7: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MatchTable'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Match entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time.getTime());
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(3, area);
        }
 
        String manager = entity.getManager();
        if (manager != null) {
            stmt.bindString(4, manager);
        }
 
        String menbers = entity.getMenbers();
        if (menbers != null) {
            stmt.bindString(5, menbers);
        }
 
        String paidMenbers = entity.getPaidMenbers();
        if (paidMenbers != null) {
            stmt.bindString(6, paidMenbers);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(7, price);
        }
 
        Boolean isComplete = entity.getIsComplete();
        if (isComplete != null) {
            stmt.bindLong(8, isComplete ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Match readEntity(Cursor cursor, int offset) {
        Match entity = new Match( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // area
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // manager
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // menbers
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // paidMenbers
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // price
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // isComplete
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Match entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setArea(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setManager(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMenbers(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPaidMenbers(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsComplete(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Match entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Match entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
